# HASSAAN AHMAD WAQAR
# LUMS-2022-10-0137
# All rights reserved

#---------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------- FREE CELL CARD GAME --------------------------------------------------------

    #include <iostream>
    #include <cstdlib>
    #include <ctime>
    #include <sstream>
    #include <fstream>
    using namespace std;

    // create class. Make *P-cards as private var and store values in constructor.
    struct Cards
    {
        char color;
        char suit;
        char ranks;
    };

    class Game{
    public:
        int First_Option();
        void Set_Deck();
        void Set_Random();
        void Arrange_Cards();
        void Print_State();
        void Max_Cap();
        int Menu();
        void Col_Col();
        void Col_FreeCell();
        void FreeCell_Col();
        void Col_Home();
        void FreeCell_Home();
        void Result();
        void Save_Game();
        void Load_Game();

    private:
        Cards* P_Cards;
        Cards** Mycards;
        Cards Store[4];
        Cards Home[4];

        int C1_cap;
        int C2_cap;
        int C3_cap;
        int C4_cap;
        int C5_cap;
        int C6_cap;
        int C7_cap;
        int C8_cap;
        int Store_cap;
        int Max[8];
        int Max_Val;

        int Home1_cap;
        int Home2_cap;
        int Home3_cap;
        int Home4_cap;

    };
    
    int main(){

        Game FreeCell;
        int option, option_2;
        int initial = FreeCell.First_Option();
        if(initial == 2)
        {
        FreeCell.Set_Deck();
        FreeCell.Set_Random();
        FreeCell.Arrange_Cards();
        FreeCell.Load_Game();
        FreeCell.Print_State();
        option_2 = FreeCell.Menu();
        while(option_2 != -1){
        switch(option_2){
            case 1: { FreeCell.Col_Col();
            option_2 = FreeCell.Menu();
            break; }
            case 2: { FreeCell.Col_FreeCell();
            option_2 = FreeCell.Menu();
            break;}
            case 3: { FreeCell.FreeCell_Col();
            option_2 = FreeCell.Menu();
            break;}
            case 4: { FreeCell.Col_Home();
            option_2 = FreeCell.Menu();
            break;}
            case 5: { FreeCell.FreeCell_Home();
            option_2 = FreeCell.Menu();
            break;}
            case 6: { FreeCell.Save_Game();
            option_2 = FreeCell.Menu();
            break;}
            }
        }

        }
        else{
        FreeCell.Set_Deck();
        FreeCell.Set_Random();
        FreeCell.Arrange_Cards();
        FreeCell.Print_State();
        option = FreeCell.Menu();
        while(option != -1){
        switch(option){
            case 1: { FreeCell.Col_Col();
            option = FreeCell.Menu();
            break; }
            case 2: { FreeCell.Col_FreeCell();
            option = FreeCell.Menu();
            break;}
            case 3: { FreeCell.FreeCell_Col();
            option = FreeCell.Menu();
            break;}
            case 4: { FreeCell.Col_Home();
            option = FreeCell.Menu();
            break;}
            case 5: { FreeCell.FreeCell_Home();
            option = FreeCell.Menu();
            break;}
            case 6: { FreeCell.Save_Game();
            option = FreeCell.Menu();
            break;}
                }
            }
        }
     return 0;
     }

    int Game::First_Option(){
    cout << endl;
    int choice;
    cout << " 1. Start New Game " << endl;
    cout << " 2. Load Previous Game " << endl;
    cin >> choice;
    while( cin.fail() || (choice != 1 && choice != 2 ) )
            { cout << " Please enter a valid option from the list " << endl;
            cin.clear();
            string dummy;
            getline(cin,dummy);
            cin >> choice;
            }
    return choice;
    }

    void Game::Set_Deck(){
    P_Cards = new Cards[52];
        (P_Cards+0)->color = 'B';
        (P_Cards+0)->suit = 'C';
        (P_Cards+0)->ranks = 'A';

        (P_Cards+1)->color = 'R';
        (P_Cards+1)->suit = 'D';
        (P_Cards+1)->ranks = 'A';

        (P_Cards+2)->color = 'R';
        (P_Cards+2)->suit = 'H';
        (P_Cards+2)->ranks = 'A';

        (P_Cards+3)->color = 'B';
        (P_Cards+3)->suit = 'S';
        (P_Cards+3)->ranks = 'A';

        (P_Cards+4)->color = 'B';
        (P_Cards+4)->suit = 'C';
        (P_Cards+4)->ranks = '2';

        (P_Cards+5)->color = 'R';
        (P_Cards+5)->suit = 'D';
        (P_Cards+5)->ranks = '2';

        (P_Cards+6)->color = 'R';
        (P_Cards+6)->suit = 'H';
        (P_Cards+6)->ranks = '2';

        (P_Cards+7)->color = 'B';
        (P_Cards+7)->suit = 'S';
        (P_Cards+7)->ranks = '2';

        (P_Cards+8)->color = 'B';
        (P_Cards+8)->suit = 'C';
        (P_Cards+8)->ranks = '3';

        (P_Cards+9)->color = 'R';
        (P_Cards+9)->suit = 'D';
        (P_Cards+9)->ranks = '3';

        (P_Cards+10)->color = 'R';
        (P_Cards+10)->suit = 'H';
        (P_Cards+10)->ranks = '3';

        (P_Cards+11)->color = 'B';
        (P_Cards+11)->suit = 'S';
        (P_Cards+11)->ranks = '3';

        (P_Cards+12)->color = 'B';
        (P_Cards+12)->suit = 'C';
        (P_Cards+12)->ranks = '4';

        (P_Cards+13)->color = 'R';
        (P_Cards+13)->suit = 'D';
        (P_Cards+13)->ranks = '4';

        (P_Cards+14)->color = 'R';
        (P_Cards+14)->suit = 'H';
        (P_Cards+14)->ranks = '4';

        (P_Cards+15)->color = 'B';
        (P_Cards+15)->suit = 'S';
        (P_Cards+15)->ranks = '4';

        (P_Cards+16)->color = 'B';
        (P_Cards+16)->suit = 'C';
        (P_Cards+16)->ranks = '5';

        (P_Cards+17)->color = 'R';
        (P_Cards+17)->suit = 'D';
        (P_Cards+17)->ranks = '5';

        (P_Cards+18)->color = 'R';
        (P_Cards+18)->suit = 'H';
        (P_Cards+18)->ranks = '5';

        (P_Cards+19)->color = 'B';
        (P_Cards+19)->suit = 'S';
        (P_Cards+19)->ranks = '5';

        (P_Cards+20)->color = 'B';
        (P_Cards+20)->suit = 'C';
        (P_Cards+20)->ranks = '6';

        (P_Cards+21)->color = 'R';
        (P_Cards+21)->suit = 'D';
        (P_Cards+21)->ranks = '6';

        (P_Cards+22)->color = 'R';
        (P_Cards+22)->suit = 'H';
        (P_Cards+22)->ranks = '6';

        (P_Cards+23)->color = 'B';
        (P_Cards+23)->suit = 'S';
        (P_Cards+23)->ranks = '6';

        (P_Cards+24)->color = 'B';
        (P_Cards+24)->suit = 'C';
        (P_Cards+24)->ranks = '7';

        (P_Cards+25)->color = 'R';
        (P_Cards+25)->suit = 'D';
        (P_Cards+25)->ranks = '7';

        (P_Cards+26)->color = 'R';
        (P_Cards+26)->suit = 'H';
        (P_Cards+26)->ranks = '7';

        (P_Cards+27)->color = 'B';
        (P_Cards+27)->suit = 'S';
        (P_Cards+27)->ranks = '7';

        (P_Cards+28)->color = 'B';
        (P_Cards+28)->suit = 'C';
        (P_Cards+28)->ranks = '8';

        (P_Cards+29)->color = 'R';
        (P_Cards+29)->suit = 'D';
        (P_Cards+29)->ranks = '8';

        (P_Cards+30)->color = 'R';
        (P_Cards+30)->suit = 'H';
        (P_Cards+30)->ranks = '8';

        (P_Cards+31)->color = 'B';
        (P_Cards+31)->suit = 'S';
        (P_Cards+31)->ranks = '8';

        (P_Cards+32)->color = 'B';
        (P_Cards+32)->suit = 'C';
        (P_Cards+32)->ranks = '9';

        (P_Cards+33)->color = 'R';
        (P_Cards+33)->suit = 'D';
        (P_Cards+33)->ranks = '9';

        (P_Cards+34)->color = 'R';
        (P_Cards+34)->suit = 'H';
        (P_Cards+34)->ranks = '9';

        (P_Cards+35)->color = 'B';
        (P_Cards+35)->suit = 'S';
        (P_Cards+35)->ranks = '9';

        (P_Cards+36)->color = 'B';
        (P_Cards+36)->suit = 'C';
        (P_Cards+36)->ranks = 'T';

        (P_Cards+37)->color = 'R';
        (P_Cards+37)->suit = 'D';
        (P_Cards+37)->ranks = 'T';

        (P_Cards+38)->color = 'R';
        (P_Cards+38)->suit = 'H';
        (P_Cards+38)->ranks = 'T';

        (P_Cards+39)->color = 'B';
        (P_Cards+39)->suit = 'S';
        (P_Cards+39)->ranks = 'T';

        (P_Cards+40)->color = 'B';
        (P_Cards+40)->suit = 'C';
        (P_Cards+40)->ranks = 'J';

        (P_Cards+41)->color = 'R';
        (P_Cards+41)->suit = 'D';
        (P_Cards+41)->ranks = 'J';

        (P_Cards+42)->color = 'R';
        (P_Cards+42)->suit = 'H';
        (P_Cards+42)->ranks = 'J';

        (P_Cards+43)->color = 'B';
        (P_Cards+43)->suit = 'S';
        (P_Cards+43)->ranks = 'J';

        (P_Cards+44)->color = 'B';
        (P_Cards+44)->suit = 'C';
        (P_Cards+44)->ranks = 'Q';

        (P_Cards+45)->color = 'R';
        (P_Cards+45)->suit = 'D';
        (P_Cards+45)->ranks = 'Q';

        (P_Cards+46)->color = 'R';
        (P_Cards+46)->suit = 'H';
        (P_Cards+46)->ranks = 'Q';

        (P_Cards+47)->color = 'B';
        (P_Cards+47)->suit = 'S';
        (P_Cards+47)->ranks = 'Q';

        (P_Cards+48)->color = 'B';
        (P_Cards+48)->suit = 'C';
        (P_Cards+48)->ranks = 'K';

        (P_Cards+49)->color = 'R';
        (P_Cards+49)->suit = 'D';
        (P_Cards+49)->ranks = 'K';

        (P_Cards+50)->color = 'R';
        (P_Cards+50)->suit = 'H';
        (P_Cards+50)->ranks = 'K';

        (P_Cards+51)->color = 'B';
        (P_Cards+51)->suit = 'S';
        (P_Cards+51)->ranks = 'K';

        Store[0].color = ' ';
        Store[0].ranks = ' ';
        Store[0].suit = ' ';
        Store[1].color = ' ';
        Store[1].ranks = ' ';
        Store[1].suit = ' ';
        Store[2].color = ' ';
        Store[2].ranks = ' ';
        Store[2].suit = ' ';
        Store[3].color = ' ';
        Store[3].ranks = ' ';
        Store[3].suit = ' ';

        Home[0].color = ' ';
        Home[0].ranks = ' ';
        Home[0].suit = ' ';
        Home[1].color = ' ';
        Home[1].ranks = ' ';
        Home[1].suit = ' ';
        Home[2].color = ' ';
        Home[2].ranks = ' ';
        Home[2].suit = ' ';
        Home[3].color = ' ';
        Home[3].ranks = ' ';
        Home[3].suit = ' ';
    }

    void Game::Set_Random(){
        srand(time(0));
        Cards temp;
        int random=0;
        for(int i=0; i<52; i++)
        {
            random = rand()%52;
            temp = P_Cards[i];
            P_Cards[i]=P_Cards[random];
            P_Cards[random]= temp;
        }
    }

    void Game::Arrange_Cards(){
         C1_cap = 7;
         C2_cap = 7;
         C3_cap = 7;
         C4_cap = 7;
         C5_cap = 6;
         C6_cap = 6;
         C7_cap = 6;
         C8_cap = 6;
         Store_cap = 4;
         Home1_cap = 0;
         Home2_cap = 0;
         Home3_cap = 0;
         Home4_cap = 0;

        Mycards = new Cards*[8];
        Mycards[0]= new Cards[C1_cap];
        Mycards[1]= new Cards[C2_cap];
        Mycards[2]= new Cards[C3_cap];
        Mycards[3]= new Cards[C4_cap];
        Mycards[4]= new Cards[C5_cap];
        Mycards[5]= new Cards[C6_cap];
        Mycards[6]= new Cards[C7_cap];
        Mycards[7]= new Cards[C8_cap];

        for(int i=0; i< C1_cap; i++)
        {
            Mycards[0][i]=P_Cards[i];
        }

        for(int i=0; i< C2_cap; i++)
        {
            Mycards[1][i]=P_Cards[i+7];
        }

        for(int i=0; i< C3_cap; i++)
        {
            Mycards[2][i]=P_Cards[i+14];
        }

        for(int i=0; i< C4_cap; i++)
        {
            Mycards[3][i]=P_Cards[i+21];
        }

        for(int i=0; i< C5_cap; i++)
        {
            Mycards[4][i]=P_Cards[i+28];
        }

        for(int i=0; i< C6_cap; i++)
        {
            Mycards[5][i]=P_Cards[i+34];
        }

        for(int i=0; i< C7_cap; i++)
        {
            Mycards[6][i]=P_Cards[i+40];
        }

        for(int i=0; i< C8_cap; i++)
        {
            Mycards[7][i]=P_Cards[i+46];
        }

    }

    void Game::Print_State(){
        Max_Cap();
        cout << endl;
        cout << "                 ************************************************************        " << endl;
        cout << "                 |  FREECELL- A BEAUTIFUL CARD GAME by HASSAAN AHMAD WAQAR  |        " << endl;
        cout << "                 ************************************************************        " << endl;
        cout << endl;
        cout << "-------------------------------------------------- " << endl;


        cout << "  __  " << "  __  " << "  __  " << "  __  " << "  __  " << "  __  " << "  __  " << "  __  " << endl;

        for(int i=0; i<4; i++)
        {
            cout << " |" << Store[i].suit << Store[i].ranks << "| ";
        }
        for(int i=0; i<4; i++)
        {
            cout << " |" << Home[i].suit << Home[i].ranks << "| ";
        }
        cout << endl;
        cout << endl;

        for(int x=0; x<Max_Val; x++)
        {   int a=0;
            for(int i=x; i<=x; i++)
            {
                if( (i+1) > C1_cap )
               {cout << "    " <<  "  ";}
               else{ cout << " |" << Mycards[a][i].suit<< Mycards[a][i].ranks << "| ";}
            }
            a++;

            for(int i=x; i<=x; i++)
            {
                if( (i+1) > C2_cap )
               {cout << "    " <<  "  ";}
               else{ cout << " |" << Mycards[a][i].suit<< Mycards[a][i].ranks << "| ";}
            }
            a++;

            for(int i=x; i<=x; i++)
            {
                if( (i+1) > C3_cap )
               {cout << "    " <<  "  ";}
               else{ cout << " |" << Mycards[a][i].suit<< Mycards[a][i].ranks << "| ";}
            }
            a++;

            for(int i=x; i<=x; i++)
            {
                if( (i+1) > C4_cap )
               {cout << "    " <<  "  ";}
               else{ cout << " |" << Mycards[a][i].suit<< Mycards[a][i].ranks << "| ";}
            }
            a++;

            for(int i=x; i<=x; i++)
            {
                if( (i+1) > C5_cap )
               {cout << "    " <<  "  ";}
               else{ cout << " |" << Mycards[a][i].suit<< Mycards[a][i].ranks << "| ";}
            }
            a++;

            for(int i=x; i<=x; i++)
            {
                if( (i+1) > C6_cap )
               {cout << "    " <<  "  ";}
               else{ cout << " |" << Mycards[a][i].suit<< Mycards[a][i].ranks << "| ";}
            }
            a++;

            for(int i=x; i<=x; i++)
            {
                if( (i+1) > C7_cap )
               {cout << "    " <<  "  ";}
               else{ cout << " |" << Mycards[a][i].suit<< Mycards[a][i].ranks << "| ";}
            }
            a++;

            for(int i=x; i<=x; i++)
            {
                if( (i+1) > C8_cap )
               {cout << "    " <<  "  ";}
               else{ cout << " |" << Mycards[a][i].suit<< Mycards[a][i].ranks << "| ";}
            }
            a++;
            cout << endl;
        }
        cout << endl;
        cout << "-------------------------------------------------- " << endl;
        Result();
    }

    int Game::Menu(){
    cout << endl;
    int choice;
    cout << " Press 1 for Tableau to Tableau move " << endl;
    cout << " Press 2 for Tableau to FreeCell move " << endl;
    cout << " Press 3 for FreeCell to Tableau move " << endl;
    cout << " Press 4 for Tableau to Home move " << endl;
    cout << " Press 5 for FreeCell to Home move " << endl;
    cout << " Press 6 to save your unfinished game " << endl;
    cout << " Press -1 to Quit " << endl;
    cout << " Choice: ";
    cin >> choice;

    while( cin.fail() || (choice != 1 && choice != 2 && choice != 3 && choice != 4 && choice != 5 && choice != 6 && choice!= -1 ) )
            { cout << " Please enter a valid option from the list " << endl;
            cin.clear();
            string dummy;
            getline(cin,dummy);
            cin >> choice;
            }
    return choice;
    }

    void Game::Max_Cap()
    {
        Max[0]=C1_cap;
        Max[1]=C2_cap;
        Max[2]=C3_cap;
        Max[3]=C4_cap;
        Max[4]=C5_cap;
        Max[5]=C6_cap;
        Max[6]=C7_cap;
        Max[7]=C8_cap;

        Max_Val=Max[0];
        for(int i=0; i<8; i++)
        {
            if(Max[i] >= Max_Val)
            {
                Max_Val = Max[i];
            }
        }
    }

    void Game::Col_Col(){
    cout << endl;
    bool marker = true;
    int source, dest, num;
    cout << " Enter source col: ";
    cin >> source;
    while( cin.fail() || (source <1 || source > 8 ) )
            { cout << " Please enter a valid number (1-8)" << endl;
            cin.clear();
            string dummy;
            getline(cin,dummy);
            cin >> source;
            }

    cout << " Enter destination col: ";
    cin >> dest;
    while( cin.fail() || (dest <1 || dest > 8 ) )
            { cout << " Please enter a valid number (1-8) " << endl;
            cin.clear();
            string dummy;
            getline(cin,dummy);
            cin >> dest;
            }

    cout << " Enter Number of cards to move: ";
    cin >> num;
    if((num > Store_cap) || cin.fail() )
        {cin.clear();
        string dummy;
        getline(cin, dummy);
        marker = false; }

    int source_size = Max[source-1];
    int dest_size = Max[dest-1];

    if(num>1){
    if( ( (Mycards[source-1][source_size-num].ranks >'1') && (Mycards[source-1][source_size-num].ranks <'9') ) && ( (Mycards[dest-1][dest_size-num].ranks >'1') && (Mycards[dest-num][dest_size-num].ranks <'9' ) ) )
       { if( Mycards[source-1][source_size-num].ranks !=  ((Mycards[dest-1][dest_size-num].ranks)-1))
        {marker = false;} }
    if( Mycards[source-1][source_size-num].color == Mycards[dest-1][dest_size-1].color )
    { marker = false;}
    else if( Mycards[source-1][source_size-num].ranks == '9' &&  Mycards[dest-1][dest_size-num].ranks != 'T' )
    {marker = false;}
    else if( Mycards[source-1][source_size-num].ranks == 'T' &&  Mycards[dest-1][dest_size-num].ranks != 'J' )
    {marker = false;}
    else if( Mycards[source-1][source_size-num].ranks == 'J' &&  Mycards[dest-1][dest_size-num].ranks != 'Q' )
    {marker = false;}
    else if( Mycards[source-1][source_size-num].ranks == 'Q' &&  Mycards[dest-1][dest_size-num].ranks != 'K' )
    {marker = false;}
    else if( Mycards[source-1][source_size-num].ranks == 'K' &&  Mycards[dest-1][dest_size-num].ranks != 'A' )
    {marker = false;}

    for(int i=source_size-num; i<source_size; i++ )
    {
    if( Mycards[source-1][i].ranks == 'T' &&  Mycards[source-1][i+1].ranks != '9' )
    {marker = false;}
    else if( Mycards[source-1][i].ranks == 'J' &&  Mycards[source-1][i+1].ranks != 'T' )
    {marker = false;}
    else if( Mycards[source-1][i].ranks == 'Q' &&  Mycards[source-1][i+1].ranks != 'J' )
    {marker = false;}
    else if( Mycards[source-1][i].ranks == 'K' &&  Mycards[source-1][i+1].ranks != 'Q' )
    {marker = false;}
    else if( Mycards[source-1][i].ranks == 'A' &&  Mycards[source-1][i+1].ranks != 'K' )
    {marker = false;}
    else if( Mycards[source-1][i].color ==  (Mycards[source-1][i+1].color))
    {marker = false;}

    if( ( (Mycards[source-1][i].ranks >'1') && (Mycards[source-1][i].ranks <'9') ) && ( (Mycards[source-1][i+1].ranks >'1') && (Mycards[source-1][i+1].ranks <'9' ) ) )
       { if( Mycards[source-1][i].ranks !=  ((Mycards[source-1][i+1].ranks)+1))
        {marker = false;} }
    }

    }

    else {
    if( Mycards[source-1][source_size-num].ranks == '9' &&  Mycards[dest-1][dest_size-1].ranks != 'T' )
    {marker = false;}
    else if( Mycards[source-1][source_size-num].ranks == 'T' &&  Mycards[dest-1][dest_size-1].ranks != 'J' )
    {marker = false;}
    else if( Mycards[source-1][source_size-num].ranks == 'J' &&  Mycards[dest-1][dest_size-1].ranks != 'Q' )
    {marker = false;}
    else if( Mycards[source-1][source_size-num].ranks == 'Q' &&  Mycards[dest-1][dest_size-1].ranks != 'K' )
    {marker = false;}
    else if( Mycards[source-1][source_size-num].ranks == 'K' &&  Mycards[dest-1][dest_size-1].ranks != 'A' )
    {marker = false;}
    else if( Mycards[source-1][source_size-num].color ==  (Mycards[dest-1][dest_size-1].color))
    {marker = false;}

    if( ( (Mycards[source-1][source_size-num].ranks >'1') && (Mycards[source-1][source_size-num].ranks <'9') ) && ( (Mycards[dest-1][dest_size-1].ranks >'1') && (Mycards[dest-1][dest_size-1].ranks <'9' ) ) )
       { if( Mycards[source-1][source_size-num].ranks !=  ((Mycards[dest-1][dest_size-1].ranks)-1))
        {marker = false;} }
    }

    if(marker == false) {cout << " Invalid Move " << endl;
    cout << endl;
    Print_State();}
    else
        {Cards *temp = new Cards[num];

        for(int i=0; i< num; i++)
        {   int a=(source_size-num) +i;
            (temp+i)->color = Mycards[source-1][a].color;
            (temp+i)->ranks = Mycards[source-1][a].ranks;
            (temp+i)->suit = Mycards[source-1][a].suit;
        }
        cout << endl;
        for(int i=0; i< num; i++)
        {   int a=(source_size-num) +i;
            Mycards[source-1][a].color = ' ';
            Mycards[source-1][a].ranks = ' ';
            Mycards[source-1][a].suit = ' ';
        }

        //Dynamic Increase
        Cards* increase;
        increase = new Cards[dest_size];

        for(int i=0; i<dest_size;i++)
        {  increase[i] = Mycards[dest-1][i];    }

        delete [] Mycards[dest-1];

        Mycards[dest-1] = new Cards[dest_size+num];

        for(int i=0; i<dest_size;i++)
        {   Mycards[dest-1][i] = increase[i];    }

        delete [] increase;

        int a=0;
        for(int i=dest_size; i<dest_size+num; i++)
        {   Mycards[dest-1][i].color = (temp+a)->color;
            Mycards[dest-1][i].ranks = (temp+a)->ranks;
            Mycards[dest-1][i].suit = (temp+a)->suit;
            a++;
        }

        //size increase
        if(dest == 1){C1_cap = C1_cap + num;}
        else if(dest == 2) {C2_cap = C2_cap + num;}
        else if(dest == 3) {C3_cap = C3_cap + num;}
        else if(dest == 4) {C4_cap = C4_cap + num;}
        else if(dest == 5) {C5_cap = C5_cap + num;}
        else if(dest == 6) {C6_cap = C6_cap + num;}
        else if(dest == 7) {C7_cap = C7_cap + num;}
        else if(dest == 8) {C8_cap = C8_cap + num;}


        // Dynamic Decrease
        Cards* decrease = new Cards[source_size];

        for(int i=0; i<source_size;i++)
        {  decrease[i] = Mycards[source-1][i];    }

        delete [] Mycards[source-1];

        Mycards[source-1]= new Cards[source_size-num];

        for(int i=0; i<source_size-num;i++)
        {
            Mycards[source-1][i] = decrease[i];
        }
        delete [] decrease;

        //size decrease
        if(source == 1){C1_cap = C1_cap - num;}
        else if(source == 2) {C2_cap = C2_cap - num;}
        else if(source == 3) {C3_cap = C3_cap - num;}
        else if(source == 4) {C4_cap = C4_cap - num;}
        else if(source == 5) {C5_cap = C5_cap - num;}
        else if(source == 6) {C6_cap = C6_cap - num;}
        else if(source == 7) {C7_cap = C7_cap - num;}
        else if(source == 8) {C8_cap = C8_cap - num;}


        cout << endl;
        Print_State();
        }
    }

    void Game::Col_FreeCell(){
    int source, dest;
    bool marker = true;
    cout << " Enter source col: ";
    cin >> source;
    while( cin.fail() || (source <1 || source > 8 ) )
            { cout << " Please enter a valid number (1-8) " << endl;
            cin.clear();
            string dummy;
            getline(cin,dummy);
            cin >> source;
            }

    cout << " Enter destination col of FreeCell: ";
    cin >> dest;
    while( cin.fail() || (dest <1 || dest >4 ) )
            { cout << " Please enter a valid number (1-4) " << endl;
            cin.clear();
            string dummy;
            getline(cin,dummy);
            cin >> dest;
            }

    if(Store_cap == 0)
    {marker = false;}
    int source_size = Max[source-1];
    if(Mycards[source-1][source_size-1].ranks == 'A')
    {marker = false;}
    if(Store[dest-1].color != ' ')
    {marker = false; }

    if(marker== false) {cout << " Invalid Move " << endl;
        cout << endl;
        Print_State();}
    else{
        //Filling Free Cell
        Store[dest-1] = Mycards[source-1][source_size-1];
        Store_cap = Store_cap -1;

        // Dynamic Decrease
        Cards* decrease = new Cards[source_size];

        for(int i=0; i<source_size;i++)
        {  decrease[i] = Mycards[source-1][i];    }

        delete [] Mycards[source-1];

        Mycards[source-1]= new Cards[source_size-1];

        for(int i=0; i<source_size-1;i++)
        {
            Mycards[source-1][i] = decrease[i];
        }
        delete [] decrease;

        //size decrease
        if(source == 1){C1_cap = C1_cap - 1;}
        else if(source == 2) {C2_cap = C2_cap - 1;}
        else if(source == 3) {C3_cap = C3_cap - 1;}
        else if(source == 4) {C4_cap = C4_cap - 1;}
        else if(source == 5) {C5_cap = C5_cap - 1;}
        else if(source == 6) {C6_cap = C6_cap - 1;}
        else if(source == 7) {C7_cap = C7_cap - 1;}
        else if(source == 8) {C8_cap = C8_cap - 1;}

        cout << endl;
        Print_State();
        }
    }

    void Game::FreeCell_Col(){
    bool marker = true;
    int source, dest;
    cout << endl;
    cout << " Enter Card to Move of FreeCell: ";
    cin >> source;
    while( cin.fail() || (source <1 || source > 4 ) )
            { cout << " Please enter a valid number (1-4) " << endl;
            cin.clear();
            string dummy;
            getline(cin,dummy);
            cin >> source;
            }

    cout << " Enter destination col: ";
    cin >> dest;
    while( cin.fail() || (dest <1 || dest > 8 ) )
            { cout << " Please enter a valid number (1-8) " << endl;
            cin.clear();
            string dummy;
            getline(cin,dummy);
            cin >> dest;
            }

    int dest_size = Max[dest-1];

    if( Store[source-1].ranks == '9' &&  Mycards[dest-1][dest_size-1].ranks != 'T' )
    {marker = false;}
    else if( Store[source-1].ranks == 'T' &&  Mycards[dest-1][dest_size-1].ranks != 'J' )
    {marker = false;}
    else if( Store[source-1].ranks == 'J' &&  Mycards[dest-1][dest_size-1].ranks != 'Q' )
    {marker = false;}
    else if( Store[source-1].ranks == 'Q' &&  Mycards[dest-1][dest_size-1].ranks != 'K' )
    {marker = false;}
    else if( Store[source-1].ranks == 'K' &&  Mycards[dest-1][dest_size-1].ranks != 'A' )
    {marker = false;}
    else if( Store[source-1].color ==  Mycards[dest-1][dest_size-1].color)
    {marker = false;}
    else if( Store[source-1].color == ' ')
    {marker = false;}
    else if( ( (Store[source-1].ranks >'1') && (Store[source-1].ranks <'9') ) && ( (Mycards[dest-1][dest_size-1].ranks >'1') && (Mycards[dest-1][dest_size-1].ranks <'9' ) ) )
       { if( Store[source-1].ranks !=  ((Mycards[dest-1][dest_size-1].ranks)-1))
        {marker = false;} }

    if(marker == false) {cout << " Invalid Move " << endl;
    cout << endl;
    Print_State();}
    else {
        //Dynamic Increase
        Cards* increase;
        increase = new Cards[dest_size];

        for(int i=0; i<dest_size;i++)
        {  increase[i] = Mycards[dest-1][i];    }

        delete [] Mycards[dest-1];

        Mycards[dest-1] = new Cards[dest_size+1];

        for(int i=0; i<dest_size;i++)
        {   Mycards[dest-1][i] = increase[i];    }

        delete [] increase;

        Mycards[dest-1][dest_size] = Store[source-1];

        //size increase
        if(dest == 1){C1_cap = C1_cap + 1;}
        else if(dest == 2) {C2_cap = C2_cap + 1;}
        else if(dest == 3) {C3_cap = C3_cap + 1;}
        else if(dest == 4) {C4_cap = C4_cap + 1;}
        else if(dest == 5) {C5_cap = C5_cap + 1;}
        else if(dest == 6) {C6_cap = C6_cap + 1;}
        else if(dest == 7) {C7_cap = C7_cap + 1;}
        else if(dest == 8) {C8_cap = C8_cap + 1;}

        //Clearing FreeCell element
        Store[source-1].color = ' ';
        Store[source-1].ranks = ' ';
        Store[source-1].suit = ' ';
        Store_cap = Store_cap + 1 ;

        cout << endl;
        Print_State();
        }
    }

    void Game::Col_Home()
    {
    cout << endl;
    bool marker = true;
    int source, dest;
    cout << " Enter source col: ";
    cin >> source;
    while( cin.fail() || (source <1 || source > 8 ) )
            { cout << " Please enter a valid number (1-8) " << endl;
            cin.clear();
            string dummy;
            getline(cin,dummy);
            cin >> source;
            }

    cout << " Enter destination col of Home Cell: ";
    cin >> dest;
    while( cin.fail() || (dest <1 || dest > 4 ) )
            { cout << " Please enter a valid number (1-4) " << endl;
            cin.clear();
            string dummy;
            getline(cin,dummy);
            cin >> dest;
            }

    int source_size = Max[source-1];

    if( ( (Home[dest-1].ranks >'1') && (Home[dest-1].ranks <'9') ) && ( (Mycards[source-1][source_size-1].ranks >'1') && (Mycards[source-1][source_size-1].ranks <'9' ) ) )
       { if( Home[dest-1].ranks !=  ((Mycards[source-1][source_size-1].ranks)-1))
        {marker = false;} }

    if(Mycards[source-1][source_size-1].ranks != 'A')
    {
    if(Mycards[source-1][source_size-1].suit != Home[dest-1].suit )
    {marker = false;}
    }

    if( Mycards[source-1][source_size-1].ranks == 'A' &&  Home[dest-1].ranks != ' ' )
    {marker = false; }
    else if(Home[dest-1].ranks == 'A' && Mycards[source-1][source_size-1].ranks != '2' )
    {marker = false;}
    else if( Mycards[source-1][source_size-1].ranks == 'T' &&  Home[dest-1].ranks != '9' )
    {marker = false;}
    else if( Mycards[source-1][source_size-1].ranks == 'J' &&  Home[dest-1].ranks != 'T' )
    {marker = false;}
    else if( Mycards[source-1][source_size-1].ranks == 'Q' &&  Home[dest-1].ranks != 'J' )
    {marker = false;}
    else if( Mycards[source-1][source_size-1].ranks == 'K' &&  Home[dest-1].ranks != 'Q' )
    {marker = false;}

    if(marker == false)
    {cout << " Invalid Move " << endl;
    cout << endl;
    Print_State();
    }
    else{
        Home[dest-1].color = Mycards[source-1][source_size-1].color;
        Home[dest-1].ranks = Mycards[source-1][source_size-1].ranks;
        Home[dest-1].suit = Mycards[source-1][source_size-1].suit;

        //Dynamic Decrease
        Cards* decrease = new Cards[source_size];

        for(int i=0; i<source_size;i++)
        {  decrease[i] = Mycards[source-1][i];    }

        delete [] Mycards[source-1];

        Mycards[source-1]= new Cards[source_size-1];

        for(int i=0; i<source_size-1;i++)
        {
            Mycards[source-1][i] = decrease[i];
        }
        delete [] decrease;

        //size decrease
        if(source == 1){C1_cap = C1_cap - 1;}
        else if(source == 2) {C2_cap = C2_cap - 1;}
        else if(source == 3) {C3_cap = C3_cap - 1;}
        else if(source == 4) {C4_cap = C4_cap - 1;}
        else if(source == 5) {C5_cap = C5_cap - 1;}
        else if(source == 6) {C6_cap = C6_cap - 1;}
        else if(source == 7) {C7_cap = C7_cap - 1;}
        else if(source == 8) {C8_cap = C8_cap - 1;}

        // Home Cap count increase
        if(dest == 1){Home1_cap = Home1_cap + 1;}
        else if(dest == 2){Home2_cap = Home2_cap + 1;}
        else if(dest == 3){Home3_cap = Home3_cap + 1;}
        else if(dest == 4){Home4_cap = Home4_cap + 1;}

        cout <<endl;
        Print_State();
        }
    }

    void Game::FreeCell_Home()
    {
    cout << endl;
    bool marker = true;
    int source, dest;
    cout << " Enter source col: ";
    cin >> source;
    while( cin.fail() || (source <1 || source > 4 ) )
            { cout << " Please enter a valid number (1-4) " << endl;
            cin.clear();
            string dummy;
            getline(cin,dummy);
            cin >> source;
            }

    cout << " Enter destination col of Home Cell: ";
    cin >> dest;
    while( cin.fail() || (dest <1 || dest > 4 ) )
            { cout << " Please enter a valid number (1-4) " << endl;
            cin.clear();
            string dummy;
            getline(cin,dummy);
            cin >> dest;
            }

    if( ( (Home[dest-1].ranks >'1') && (Home[dest-1].ranks <'9') ) && ( (Store[source-1].ranks >'1') && (Store[source-1].ranks <'9' ) ) )
    { if( Home[dest-1].ranks !=  ((Store[source-1].ranks)-1))
    {marker = false;} }
    if(Store[source-1].suit != Home[dest-1].suit )
    {marker = false;}

    if(Store[source-1].color == ' ')
    {marker = false; }

    if(Home[dest-1].ranks == 'A' && Store[source-1].ranks != '2' )
    {marker = false;}
    else if( Store[source-1].ranks == 'T' &&  Home[dest-1].ranks != '9' )
    {marker = false;}
    else if( Store[source-1].ranks == 'J' &&  Home[dest-1].ranks != 'T' )
    {marker = false;}
    else if( Store[source-1].ranks == 'Q' &&  Home[dest-1].ranks != 'J' )
    {marker = false;}
    else if( Store[source-1].ranks == 'K' &&  Home[dest-1].ranks != 'Q' )
    {marker = false;}

    if(marker == false)
    {cout << " Invalid Move " << endl;
    cout << endl;
    Print_State();
    }
    else{
        Home[dest-1].color = Store[source-1].color;
        Home[dest-1].ranks = Store[source-1].ranks;
        Home[dest-1].suit = Store[source-1].suit;

    // Home Cap count increase
        if(dest == 1){Home1_cap = Home1_cap + 1;}
        else if(dest == 2){Home2_cap = Home2_cap + 1;}
        else if(dest == 3){Home3_cap = Home3_cap + 1;}
        else if(dest == 4){Home4_cap = Home4_cap + 1;}

        //Clearing FreeCell element
        Store[source-1].color = ' ';
        Store[source-1].ranks = ' ';
        Store[source-1].suit = ' ';
        Store_cap = Store_cap + 1;

        cout <<endl;
        Print_State();

    }
    }

    void Game::Result(){
    if(Home1_cap == 12 && Home2_cap == 12 && Home3_cap == 12 && Home4_cap ==12)
    {   cout << " ----------------------------------- " << endl;
        cout << " CONGRATULATIONS!!! YOU WON, GENIUS! " << endl;
        cout << " ----------------------------------- " << endl;
    }
    }

    void Game::Save_Game(){
    ofstream Save("Saved.txt");

    Save << C1_cap << endl;
    Save << C2_cap << endl;
    Save << C3_cap << endl;
    Save << C4_cap << endl;
    Save << C5_cap << endl;
    Save << C6_cap << endl;
    Save << C7_cap << endl;
    Save << C8_cap << endl;
    Save << Store_cap << endl;
    Save << Max_Val << endl;
    Save << Home1_cap << endl;
    Save << Home2_cap << endl;
    Save << Home3_cap << endl;
    Save << Home4_cap << endl;
    for(int i = 0; i<8; i++)
    {
        Save << Max[i] << endl;
    }
    for (int i = 0; i<4; i++)
    {
        if(Store[i].color == ' ')
        {Save << '0' << endl;}
        else{Save << Store[i].color << endl;}
        if(Store[i].suit == ' ')
        {Save << '0' << endl;}
        else {Save << Store[i].suit << endl;}
        if(Store[i].ranks == ' ')
        {Save << '0' << endl;}
        else{Save << Store[i].ranks << endl;}
    }
    for (int i = 0; i<4; i++)
    {
        if(Home[i].color == ' ')
        {Save << '0' << endl;}
        else{Save << Home[i].color << endl;}
        if(Home[i].suit == ' ')
        {Save << '0' << endl;}
        else {Save << Home[i].suit << endl;}
        if(Home[i].ranks == ' ')
        {Save << '0' << endl;}
        else{Save << Home[i].ranks << endl;}
    }

    for(int i=0; i< C1_cap; i++)
    {
        Save << Mycards[0][i].color << endl;
        Save << Mycards[0][i].suit << endl;
        Save << Mycards[0][i].ranks << endl;
    }

    for(int i=0; i< C2_cap; i++)
    {
        Save << Mycards[1][i].color << endl;
        Save << Mycards[1][i].suit << endl;
        Save << Mycards[1][i].ranks << endl;
    }

    for(int i=0; i< C3_cap; i++)
    {
        Save << Mycards[2][i].color << endl;
        Save << Mycards[2][i].suit << endl;
        Save << Mycards[2][i].ranks << endl;
    }

    for(int i=0; i< C4_cap; i++)
    {
        Save << Mycards[3][i].color << endl;
        Save << Mycards[3][i].suit << endl;
        Save << Mycards[3][i].ranks << endl;
    }

    for(int i=0; i< C5_cap; i++)
    {
        Save << Mycards[4][i].color << endl;
        Save << Mycards[4][i].suit << endl;
        Save << Mycards[4][i].ranks << endl;
    }

    for(int i=0; i< C6_cap; i++)
    {
        Save << Mycards[5][i].color << endl;
        Save << Mycards[5][i].suit << endl;
        Save << Mycards[5][i].ranks << endl;
    }

    for(int i=0; i< C7_cap; i++)
    {
        Save << Mycards[6][i].color << endl;
        Save << Mycards[6][i].suit << endl;
        Save << Mycards[6][i].ranks << endl;
    }

    for(int i=0; i< C8_cap; i++)
    {
        Save << Mycards[7][i].color << endl;
        Save << Mycards[7][i].suit << endl;
        Save << Mycards[7][i].ranks << endl;
    }

    Save.close();

    cout << endl;
    cout << " Save Successful! Happy Playing! " << endl;
    cout << endl;
    Print_State();
    }

    void Game::Load_Game(){
    ifstream Load("Saved.txt");
    Load >> C1_cap;
    Load >> C2_cap;
    Load >> C3_cap;
    Load >> C4_cap;
    Load >> C5_cap;
    Load >> C6_cap;
    Load >> C7_cap;
    Load >> C8_cap;
    Load >> Store_cap;
    Load >> Max_Val;
    Load >> Home1_cap;
    Load >> Home2_cap;
    Load >> Home3_cap;
    Load >> Home4_cap;
    for(int i=0; i<8; i++)
    {
        Load >> Max[i];
    }
    for(int i =0; i<4; i++)
    {
        Load >> Store[i].color;
        if(Store[i].color == '0')
        { Store[i].color = ' ';}
        Load >> Store[i].suit;
        if(Store[i].suit == '0')
        { Store[i].suit = ' '; }
        Load >> Store[i].ranks;
        if(Store[i].ranks == '0')
        { Store[i].ranks = ' ';}
    }

    for(int i =0; i<4; i++)
    {
        Load >> Home[i].color;
        if(Home[i].color == '0')
        { Home[i].color = ' ';}
        Load >> Home[i].suit;
        if(Home[i].suit == '0')
        { Home[i].suit = ' '; }
        Load >> Home[i].ranks;
        if(Home[i].ranks == '0')
        { Home[i].ranks = ' ';}
    }

    for(int i=0; i< C1_cap; i++)
    {
        Load >> Mycards[0][i].color;
        Load >> Mycards[0][i].suit;
        Load >> Mycards[0][i].ranks;
    }

    for(int i=0; i< C2_cap; i++)
    {
        Load >> Mycards[1][i].color;
        Load >> Mycards[1][i].suit;
        Load >> Mycards[1][i].ranks;
    }

    for(int i=0; i< C3_cap; i++)
    {
        Load >> Mycards[2][i].color;
        Load >> Mycards[2][i].suit;
        Load >> Mycards[2][i].ranks;
    }

    for(int i=0; i< C4_cap; i++)
    {
        Load >> Mycards[3][i].color;
        Load >> Mycards[3][i].suit;
        Load >> Mycards[3][i].ranks;
    }

    for(int i=0; i< C5_cap; i++)
    {
        Load >> Mycards[4][i].color;
        Load >> Mycards[4][i].suit;
        Load >> Mycards[4][i].ranks;
    }

    for(int i=0; i< C6_cap; i++)
    {
        Load >> Mycards[5][i].color;
        Load >> Mycards[5][i].suit;
        Load >> Mycards[5][i].ranks;
    }

    for(int i=0; i< C7_cap; i++)
    {
        Load >>Mycards[6][i].color;
        Load >> Mycards[6][i].suit;
        Load >> Mycards[6][i].ranks;
    }

    for(int i=0; i< C8_cap; i++)
    {
        Load >> Mycards[7][i].color;
        Load >> Mycards[7][i].suit;
        Load >> Mycards[7][i].ranks;
    }

    }
