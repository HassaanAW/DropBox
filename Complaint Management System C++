# Complaint Management System C++
# HASSAAN AHMAD WAQAR
# LUMS-2022-10-0137
# HUZAIFA NADEEM
# LUMS-2022-10-0081
# All rights reserved

#--------------------------------------------------------------------------------------------------------------------------------------

#include <iostream>
#include <string>
#include <fstream> //for reading/writing files
#include <iomanip> //for input output manipulation e.g. setw()
#include <stdlib.h>
#include <conio.h> // for _getch() , used in DetectKey()
#include <windows.h> // SetTextColor & SetConsoleColors  & setCursorPosition

using namespace std;

// for DetectKey() function
#define ENTER 13
#define KEY_UP 72
#define KEY_DOWN 80
#define KEY_LEFT 75
#define KEY_RIGHT 77

void About(); // About part of our project.
char DetectKey(); // DetectKey detects up,down,right,left, and enter keys for navigating through menus.
void SetTextColor(int value); //changes text color
void SetConsoleColors(int ForgC, int BackC); //changes background color
void setCursorPosition(int x, int y); //sets console cursor at a position so we can change a particular character without clearing whole screen. - used to hide password when entering signing in and in some menus.
string passwordEnterandHide(); // inputs password and hides it with asterisk.
int welcome_menu(); // function declaration for welcome menu (login as admin/user)
int student_menu(); //function declaration for student menu (sign in and sign up)
string encrypt(string pw); //function declaration for encryption function
bool first_name_check(string firstn); // function declaration for checking first name function
bool sur_name_check(string surn); // function declaration for checking surname function
void welcome(string fname, string surname); // function definition of function that displays "Welcome" along with full name of user/admin.
string decrypt(string pw); //function declaration for decryption function
bool phone_check(string number); // function declaration for checking phone number function
int login_menu(); //function declaration for User menu once user logs in
int admin_menu(); //function declaration for Admin menu once admin logs in
void admin_details(string fname, string sname, string user_name, string pass); //function definition for admin details output function
void user_details(string fname, string sname, int camp_id, string phonenum, string emailadd, string user_name, string pass); //function definition for user details output function
void whats_new(); //function declaration for what's new option in user account.
int Send_to_Menu(); // function declaration of function giving options of main menu and log out to user.
int Old_Send_to_Menu(); // old function declaration of function giving options of main menu and log out to user.


	// the following piece of code is used to create AdminData text file and store data in it. This is pre-stored and programmed only once.
	// ofstream Admin("AdminData.data", fstream :: app);
	// Admin<< setw(20) << "Adam" << setw(20)<< "Sohail" << setw(20) << "AdamS123" << setw(20) << "adam123456" <<endl;
	//  Admin<< setw(20) << "Saira" << setw(20)<< "Naaz" << setw(20) << "SN" << setw(20) << "sairanaaz" <<endl;
	//  Admin.close();

int main()
{
    SetTextColor(0); //black text
    SetConsoleColors(0,7); //black gray background

	bool flag = 0; // bool variable controlling the looping between one menu to another and the sign out conditions.
	while (flag == 0) // when flag is set to 0, the initial menu is run which is the login portal.
	{
		string firstname, surname, email, username, password, phone, encryption, decryption, in_username, in_password, subject, report;
		int welcome_choice, stu_menu_choice, campusid, login_choice, choice;
		bool f_check, s_check, pn_check, authenticate = 0;
		int i = 0; // used to control loop counts while reading data from text file
		int match; // used to store value of index where authentication of user and password takes place.
		int const size = 500;
		string username_array[size], password_array[size], firstname_array[size], surname_array[size], email_array[size], phone_array[size]; // arrays created to store username and passwords as read from file
		int campusid_array[size]; // array declarations

		welcome_choice = welcome_menu(); //welcome menu called here
		system("CLS");
		if (welcome_choice == 4) break; // exit condition first
		else if (welcome_choice == 3) About(); //about condition
		else if (welcome_choice == 1)
		{
			stu_menu_choice = student_menu(); // student_menu function is called which returns an integer choice and that is stored in stu_menu_choice
			system("CLS");
			if (stu_menu_choice == 2) // sign up user account by filling all the information asked below
			{
				system("CLS");
				cout << endl;
				cout << "Fill in the following data: " << endl;
				cout << endl;

				do {
					cout << "First name (Please enter letters only) : ";
					cin >> firstname;
					f_check = first_name_check(firstname); // function called to check whether first name has no invalid input
                    }
                while (f_check == 0);

				do {
					cout << "Surname(Please enter letters only) : ";
					cin >> surname;
					s_check = sur_name_check(surname); // function called to check whether surname has no invalid input
                    }
				while (s_check == 0);

                string last_four;
                char onechar;
                bool check=0;
                int ascii;
                do
                {
				cout << "Email: "; //check applied for email. It should end with .com and contain at least one @
				cin >> email;
				for (int i =0; i<= email.length(); i++) // loops through the email to find @
                {
                  onechar = (email.substr(i,1))[0];
                    ascii = (int)onechar;
                  if(ascii==64)
                  {check=1;
                    break;}
                }
				last_four= email.substr(email.length()-4);
				if(last_four != ".com" || check==0) //condition of validation stated here
                {cout <<"Please enter a valid email" <<endl;} //if email is invalid, output message is displayed
                }
                while((last_four != ".com") || (check==0));

				cout << "UserName: ";
				cin >> username;

				while (password.length() <= 7)
				{
					cout << "Password (Atleast 8 char) : "; cin >> password;
					if (password.length() <= 7)
					{
						cout << "Password is too short" << endl;
					}
				}
				cout << "Campus ID: ";
				while (!(cin >> campusid))    //campusid should have numbers only so cin failure test is added
				{
					cout << "Please enter a valid ID " << endl;
					cin.clear();    // following line recover from cin failure
					string dummy;
					getline(cin, dummy);
					cout << "Campus ID: ";
				}

				do
                {   cout << "Phone Number: " <<endl;
                    cin >> phone;
                    pn_check = phone_check(phone); // sends phone number entered to a function that checks whether it contains all digits.
					if(phone.length() < 11) // only valid numbers are allowed ( >11 digits)
                    {   cout << "Please enter a valid phone number. " <<endl; }
                }
				while(pn_check == 0 || phone.length() < 11);

				cout << " You have signed-up successfully! " << endl; //this marks successful sign up of an account.
				system("PAUSE");
				encryption = encrypt(password); //password is encrypted using an algorithm

				ofstream SignUp("StudentData.data", fstream::app);
				SignUp << setw(15) << firstname << setw(15) << surname << setw(30) << email << setw(15) << username << setw(15) << encryption << setw(10) << campusid << setw(15) << phone << endl;
				SignUp.close();
				//In the above three lines, we created an Object File named SignUp which referred to the text file named StudentData (appended)
				// We then store all the information we gathered during sign up in that text file and close it in the end to free up memory.
				system("CLS");
				main();
			}
			else // sign in from the user
			{
				int counter1 = 0; // to count number of records in the file
				cout << endl;
				ifstream SignUp("StudentData.data"); // we open the same text file StudentData
				while (SignUp >> firstname >> surname >> email >> username >> encryption >> campusid >> phone) // this while loop gathers all the data till the EOF. This is alternative to using EOF function.
				{                                      // What happens above is that each separate data from the file is retrieved and stored in variables
					decryption = decrypt(encryption);    //the encrypted password stored in the file is decrypted
					firstname_array[i] = firstname; //firstname, surname, email are all added to respective arrays index wise.
					surname_array[i] = surname;
					email_array[i] = email;
					username_array[i] = username;     // usernames are added to this array as they are retrieved in the order in which account was signed up
					password_array[i] = decryption;   // similarly, passwords are added in this array in the same order in which they were created
					campusid_array[i] = campusid;
					phone_array[i] = phone;
					i = i + 1;                          // increments i so that username and password are stored in the next array position
					counter1 = counter1 + 1;           // increments counter which was the number of records in the file
				}
				while (authenticate == 0) //Loop runs as long as authentication does not take place
				{
					cout << "Please enter your UserName: ";
					cin >> in_username;
					cout << "Please enter your Password: ";
					//cin >> in_password;
					in_password = passwordEnterandHide();
					cout << endl;

					for (i = 0; i <= counter1; i++)
					{
						if (in_username == username_array[i] && in_password == password_array[i]) //condition is true when username stored in array at particular index i is same as username entered. Same for password
						{
							match = i;       // the particular array position where username and password are matched is stored in variable match
							authenticate = 1;
							break;
						}
					}
					if (authenticate == 0)
						system("CLS");
					cout << endl;
					{cout << "USERNAME OR PASSWORD IS INCORRECT " << endl;  }
				}

				if (authenticate == 1) //Once an account is authenticated
				{
					flag = 1; //flag is set to 1. These are sort of markers to aid in the looping between menus.
					system("CLS");
					welcome(firstname_array[match], surname_array[match]); //displays welcome screen with first name and surname.
					while (flag == 1)
					{
						login_choice = login_menu(); // user main  menu is displayed here.
						system("CLS");

						switch (login_choice)
						{
						case 1: {
							cout << endl;
							user_details(firstname_array[match], surname_array[match], campusid_array[match], phone_array[match], email_array[match], username_array[match], password_array[match]);
							cout << endl; // option 1 displays user details.
							choice = Send_to_Menu(); // logout/main menu options are displayed and user choice is taken.

							if (choice == 0) // if user enters 0, prompt is returned to the main menu
							{
								system("CLS");
								break;
							}

							else if (choice == 99) //if user enters 99, he is logged out from the account.
							{
								flag = 0;
								system("CLS");
								break;
							}
                                }
								break;

						case 2: {
							cout << endl;
							whats_new(); //Article under heading what's new is displayed
							cout << endl;
							choice = Send_to_Menu(); // logout/main menu options are displayed and user choice is taken.

							if (choice == 0)
							{
								system("CLS");
								break;
							}

							else if (choice == 99)
							{
								flag = 0;
								system("CLS");
								break;
							}
                                }
								break;

						case 3: { //This is the generation of a report/request from the user to the admin
							cout << endl; //These reports are then distributed to different respective files.
							cout << setw(20) << " ISSUE NEW REPORT" << endl; // following lines are the format of the report.
							cout << endl;
							cout << "Full Name: " << firstname_array[match] << " " << surname_array[match] << setw(20) << "Campus ID: " << campusid_array[match] << endl;
							cout << "Username: " << username_array[match] << endl;
							cout << "Subject: ";
							cin.ignore();
							getline(cin, subject);
							cout << "Write a report: ";
							getline(cin, report);
							cout << endl;
							cout << "===============================================================================================================" << endl;
							cout << " Your report has been forwarded to the concerned department successfully." << endl;

							ofstream AllReports("Allreports.data", fstream::app); // reports sent to Allreports.data
							AllReports << endl;
							AllReports << "Full Name: " << firstname_array[match] << " " << surname_array[match] << setw(20) << "Campus ID: " << campusid_array[match] << endl;
							AllReports << "Username: " << username_array[match] << endl;
							AllReports << "Subject: " << subject << endl;
							AllReports << "Reports: " << report << endl;
							AllReports << endl;
							AllReports << "===============================================================================================================" << endl;
							AllReports << endl;
							AllReports.close();

							string Event_history = username_array[match] + "_history.data"; //report to (username)_history.data
							ofstream UserEvents;
							UserEvents.open(Event_history.c_str(), fstream::app);
							UserEvents << endl;
							UserEvents << "Full Name: " << firstname_array[match] << " " << surname_array[match] << setw(20) << "Campus ID: " << campusid_array[match] << endl;
							UserEvents << "Username: " << username_array[match] << endl;
							UserEvents << "Subject: " << subject << endl;
							UserEvents << "Reports: " << report << endl;
							UserEvents << endl;
							UserEvents << "===============================================================================================================" << endl;
							UserEvents << endl;
							UserEvents.close();

							string Latest = username_array[match] + "_latest.data"; //report sent to (username)_latest.data
							ofstream LatestEvents;
							LatestEvents.open(Latest.c_str());
							LatestEvents << endl;
							LatestEvents << "Full Name: " << firstname_array[match] << " " << surname_array[match] << setw(20) << "Campus ID: " << campusid_array[match] << endl;
							LatestEvents << "Username: " << username_array[match] << endl;
							LatestEvents << "Subject: " << subject << endl;
							LatestEvents << "Reports: " << report << endl;
							LatestEvents << endl;
							LatestEvents << "===============================================================================================================" << endl;
							LatestEvents << endl;
							LatestEvents.close();

							ofstream Latest_Admin("Latest_admin.data", fstream::app); //report sent to Latest_admin.data
							Latest_Admin << endl;
							Latest_Admin << "Full Name: " << firstname_array[match] << " " << surname_array[match] << setw(20) << "Campus ID: " << campusid_array[match] << endl;
							Latest_Admin << "Username: " << username_array[match] << endl;
							Latest_Admin << "Subject: " << subject << endl;
							Latest_Admin << "Reports: " << report << endl;
							Latest_Admin << endl;
							Latest_Admin << "===============================================================================================================" << endl;
							Latest_Admin << endl;
							Latest_Admin.close();

							cout << endl;
							choice = Send_to_Menu(); // logout/main menu options are displayed and user choice is taken.

							if (choice == 0)
							{
								system("CLS");
								break;
							}
							else if (choice == 99)
							{
								flag = 0;
								system("CLS");
								break;
							}
                                }
								break;

						case 4: { //Under this option, latest reports are viewed including their resolution if available.
							int uchoice;
							string myuser;
							cout << endl;
							string Event_latest = username_array[match] + "_latest.data";
							cout << " View Latest Report " << endl;
							ifstream UserLatest;
							UserLatest.open(Event_latest.c_str());

							string line = ""; //the entire file is retrieved here and stored in empty string using getline (till EOF)
							while (getline(UserLatest, line))
							{
								cout << line << endl;
							}
							cout << endl;

							cout << "Press 1 to View Latest Resolution " << endl; //On the same screen, user can see response to his latest resolution
							cout << endl;
							cout << "Press 0 to go to main menu " << endl;
							cout << "Press 99 to Log Out " << endl;
							while (!(cin >> uchoice) || (uchoice != 0 && uchoice != 99 && uchoice != 1))
							{
								cout << "Please enter a valid option " << endl; //above line checks for valid input from user
								cin.clear();
								string dummy;
								getline(cin, dummy);
								cout << "Enter option ";
							}


							if (uchoice == 0)
							{
								system("CLS");
								break;
							}

							if (uchoice == 1) //This condition when fulfilled shows response to latest issue from the admin if it has been received.
							{
								system("CLS");
								myuser = username_array[match] + "_reply.data"; //latest reply from admin to respective user is displayed. IF not updated yet, then old reply stays.
								cout << endl;
								ifstream reply_to_me;
								reply_to_me.open(myuser.c_str());
								string line = "";
								while (getline(reply_to_me, line))
								{
									cout << line << endl;
								}
								cout << endl;
								system("PAUSE");
							}

							else if (uchoice == 99)
							{
								flag = 0;
								system("CLS");
								break;
							}
                                }
								break;

						case 5: { //history of all requests made are viewed here.
							cout << endl;
							string Event_history = username_array[match] + "_history.data";
							cout << " View All Reports " << endl;    //entire file is displayed on the screen once again.
							ifstream UserEvents; //Again, getline is used to EOF
							UserEvents.open(Event_history.c_str());
							string line = "";
							while (getline(UserEvents, line))
							{
								cout << line << endl;
							}
							cout << endl;
							choice = Old_Send_to_Menu(); // logout/main menu options are displayed and user choice is taken.

							if (choice == 0)
							{
								system("CLS");
								break;
							}

							else if (choice == 99)
							{
								flag = 0;
								system("CLS");
								break;
							}
                                }
								break;

						case 6: { //this option displays all resolutions from the admin
							string myuser; // this works as, admin forwards his reply in a text file from his own account.
							myuser = username_array[match] + "_appreply.data"; //That reply file of each particular user is displayed here
							system("CLS");
							cout << endl;
							ifstream reply_to_me;
							reply_to_me.open(myuser.c_str());
							string line = "";
							while (getline(reply_to_me, line))
							{
								cout << line << endl;
							}
							cout << endl;

							choice = Old_Send_to_Menu(); // logout/main menu options are displayed and user choice is taken.

							if (choice == 0)
							{
								system("CLS");
								break;
							}

							else if (choice == 99)
							{
								flag = 0;
								system("CLS");
								break;
							}

                                }

						case 7: { //option to logout and go the login menu
							flag = 0;
							system("CLS");
							break;
                                }
						}
					}
				}
			}
		}

		else // admin accounts are accessed from here
		{
			int counter2 = 0;
			ifstream Admin("AdminData.data"); //data from Admin file is read
			while (Admin >> firstname >> surname >> username >> password)
			{
				firstname_array[i] = firstname; //firstname,surname, username and password is stored in respective arrays.
				surname_array[i] = surname;
				username_array[i] = username;
				password_array[i] = password;
				i = i + 1; //this counter moves to the next record in file
				counter2 = counter2 + 1; //this counter counts the number of records in file
			}
			system("CLS");
			cout << endl;

			while (authenticate == 0) //loop is run until authentication takes place
			{
				cout << "Please enter your UserName: "; //username input is taken
				cin >> in_username;
				cout << "Please enter your Password: "; //password input is taken
				//cin >> in_password;
				in_password = passwordEnterandHide();
				cout << endl;


				for (i = 0; i <= counter2; i++)
				{
					if (in_username == username_array[i] && in_password == password_array[i]) // authentication condition is set forth
					{
						match = i;
						authenticate = 1; //authenticate boolean variable is set to 1.
						break;
					}
				}
				if (authenticate == 0) //if user name and password do not match
					system("CLS");
				cout << endl;
				{cout << "USERNAME OR PASSWORD IS INCORRECT " << endl;  }

			}

			if (authenticate == 1) //once authentication is successful
			{
				flag = 1;
				system("CLS");
				welcome(firstname_array[match], surname_array[match]); //welcome menu is called that displays first name and surname
				while (flag == 1)
				{
                login_choice = admin_menu(); //admin menu is called
                system("CLS");
                switch (login_choice)
                {
					case 1: { //admin details are displayed here
						admin_details(firstname_array[match], surname_array[match], username_array[match], password_array[match]);
						cout << endl;
						choice = Send_to_Menu(); //logout/ main menu options are displayed

						if (choice == 0) //sent to main menu
						{
							system("CLS");
							break;
						}

						else if (choice == 99) //logged out of account
						{
							flag = 0;
							system("CLS");
							break;
						}
                            }
							break;

					case 2: { //latest issues of students are displayed here
						int admin_choice;
						cout << endl;
						cout << " View Latest Issues " << endl;
						ifstream AdminLatest;
						AdminLatest.open("Latest_admin.data");

						string line = "";
						while (getline(AdminLatest, line)) //getline is used to display the entire latest issues file
						{
							cout << line << endl;
						}
						cout << endl;
						cout << "Press 1 to Resolve Issue" << endl; //students are replied to using their Username to identfy them
						cout << "Press 2 to Clear Latest Issues" << endl; //Latest issues are cleared so as not to mix up with new issues and the ones that have been responded to.
						cout << "Press 0 to go to main menu " << endl;
						cout << "Press 99 to Log Out " << endl;
						while (!(cin >> admin_choice) || (admin_choice != 0 && admin_choice != 99 && admin_choice != 1 && admin_choice != 2))
						{
							cout << "Please enter a valid option " << endl; //above line checks for valid input from user
							cin.clear();
							string dummy;
							getline(cin, dummy);
							cout << "Enter option ";
						}

						if (admin_choice == 0)
						{
							system("CLS");
							break;
						}

						if (admin_choice == 1) // reply is generated in the following format
						{
							string reply_user, reply_user_app, userreply_admin, sub, reply;
							cout << endl;
							cout << "Please enter UserName to respond to: ";
							cin >> userreply_admin;
							cout << "Subject/Re: ";
							cin.ignore();
							getline(cin, sub);
							cout << "Write a reply: ";
							getline(cin, reply);
							cout << endl;
							cout << "===============================================================================================================" << endl;
							cout << " Your reply has been forwarded to the concerned student successfully." << endl;

							reply_user_app = userreply_admin + "_appreply.data";
							reply_user = userreply_admin + "_reply.data";

							ofstream User_reply_app; //reply is distributed to different file
							User_reply_app.open(reply_user_app.c_str(), fstream::app); //this file keeps record of all resolutions of the admin
							User_reply_app << endl;
							User_reply_app << "Admin Name: " << firstname_array[match] << " " << surname_array[match] << endl;
							User_reply_app << "Username: " << username_array[match] << endl;
							User_reply_app << "Subject/Re: " << sub << endl;
							User_reply_app << "Reply: " << reply << endl;
							User_reply_app << endl;
							User_reply_app << "===============================================================================================================" << endl;
							User_reply_app << endl;
							User_reply_app.close();

							ofstream User_reply; //this file is sent to user so he can view latest issue and its resolution under one screen.
							User_reply.open(reply_user.c_str());
							User_reply << endl;
							User_reply << "Admin Name: " << firstname_array[match] << " " << surname_array[match] << endl;
							User_reply << "Username: " << username_array[match] << endl;
							User_reply << "Subject/Re: " << sub << endl;
							User_reply << "Reply: " << reply << endl;
							User_reply << endl;
							User_reply << "===============================================================================================================" << endl;
							User_reply << endl;
							User_reply.close();
							system("PAUSE");

						}

						if (admin_choice == 2)
						{
							ofstream myfile;
							myfile.open("Latest_admin.data");
							myfile << "";
							myfile.close();
							cout << "Cleared." << endl;
							system("PAUSE");
							system("CLS");
						}
						break;

						if (admin_choice == 99)
						{
							flag = 0;
							system("CLS");
							break;
						}
                            }
							break;

					case 3: { // list of all issues/reports sent by students to admin is displayed here
						cout << endl;
						cout << " View All Issues " << endl;
						ifstream AllAdminReports;
						AllAdminReports.open("Allreports.data");

						string line = "";
						while (getline(AllAdminReports, line)) //getline is used to read entire file.
						{
                            cout << line << endl;
						}
						cout << endl;

						choice = Old_Send_to_Menu(); // displays main menu/log out option and takes appropriate input from user.
						if (choice == 0)
						{
							system("CLS");
							break;
						}

						else if (choice == 99)
						{
							flag = 0;
							system("CLS");
							break;
						}
                            }
							break;

					case 4: { //this option displays resolution of a particular student using his/her username.
						system("CLS");
						cout << endl;
						string user_reply, userreply_admin;
						cout << "Enter UserName to track resolutions: ";
						cin >> userreply_admin;
						user_reply = userreply_admin + "_appreply.data";

						ifstream reply_history; // file that contains history of all resolutions of a particular student
						reply_history.open(user_reply.c_str());
						string line = "";
						while (getline(reply_history, line))
						{
							cout << line << endl;
						}
						cout << endl;

						choice = Old_Send_to_Menu(); // displays main menu/log out option and takes appropriate input from user.

						if (choice == 0) //takes prompt to main menu
						{
							system("CLS");
							break;
						}

						else if (choice == 99) //logs out from account
						{
							flag = 0;
							system("CLS");
							break;
						}
                            }

					case 5: { // log out call
						flag = 0;
						system("CLS");
						break;
                            }
					}
				}
			}
		}
	}
	return 0;
}

int welcome_menu() //function definition for welcome menu displayed at the start of the program
{
    char key = 'n';
    int choice = 0;
	int pointedAt = 1;
	do
    {
	switch(pointedAt)
	{
    case 1:
        system("cls");
        cout << endl;
		cout << endl;
		cout << " WELCOME TO LUMS PORTAL " << endl;
		cout << endl;
        cout << " > Proceed as Student " << endl;
        cout << "   Proceed as Admin " << endl;
        cout << "   About " << endl;
        cout << "   Exit " << endl;
        break;
    case 2:
        system("cls");
        cout << endl;
		cout << endl;
		cout << " WELCOME TO LUMS PORTAL " << endl;
		cout << endl;
        cout << "   Proceed as Student " << endl;
        cout << " > Proceed as Admin " << endl;
        cout << "   About " << endl;
        cout << "   Exit " << endl;
        break;
    case 3:
        system("cls");
        cout << endl;
		cout << endl;
		cout << " WELCOME TO LUMS PORTAL " << endl;
		cout << endl;
        cout << "   Proceed as Student " << endl;
        cout << "   Proceed as Admin " << endl;
        cout << " > About " << endl;
        cout << "   Exit " << endl;
        break;
    case 4:
        system("cls");
        cout << endl;
		cout << endl;
		cout << " WELCOME TO LUMS PORTAL " << endl;
		cout << endl;
        cout << "   Proceed as Student " << endl;
        cout << "   Proceed as Admin " << endl;
        cout << "   About " << endl;
        cout << " > Exit " << endl;
        break;
	}

	do
    {
        key = DetectKey();
	}
	while( key=='n' || key=='l' || key=='r');

	switch (key)
		{
		case 'd':
			if (pointedAt == 3) pointedAt = 4;
			if (pointedAt == 2) pointedAt = 3;
			if (pointedAt == 1) pointedAt = 2;
			break;

		case 'u':
			if (pointedAt == 2) pointedAt = 1;
			if (pointedAt == 3) pointedAt = 2;
			if (pointedAt == 4) pointedAt = 3;
			break;
		case 'e':
			if (pointedAt == 1) choice = 1;
			if (pointedAt == 2) choice = 2;
			if (pointedAt == 3) choice = 3;
			if (pointedAt == 4) choice = 4;
			break;
		default:
			break;

		}
    } while(choice == 0);
	return choice;
}


int student_menu() //function definition for user initial menu (sign in/ sign up)
{
	char key = 'n';
    int choice = 0;
	int pointedAt = 1;
	do
    {
        switch(pointedAt)
        {
        case 1:
            system("cls");
            cout << endl;
            cout << "  > Sign-In " << endl;
            cout << "    Sign-Up " << endl;
            break;
        case 2:
            system("cls");
            cout << endl;
            cout << "    Sign-In " << endl;
            cout << "  > Sign-Up " << endl;
            break;
        }
        do
    {
        key = DetectKey();
	}
	while( key=='n' || key=='l' || key=='r');

	switch (key)
		{
		case 'd':
			if (pointedAt == 1) pointedAt = 2;
			break;

		case 'u':
			if (pointedAt == 2) pointedAt = 1;
			break;
		case 'e':
			if (pointedAt == 1) choice = 1;
			if (pointedAt == 2) choice = 2;
			break;
		default:
			break;

    }}
    while (choice == 0);
	return choice;
}

string encrypt(string pw) //encrytion function taking in password as a parameter and returning encrypted string
{
	int length, ascii, newascii;
	char hidden, onechar;
	string encrypted = "";

	length = pw.length();
	for (int i = 0; i <= length - 1; i++) // the algorithm is as followed: if character is at even position, 44 is added to its ascii value
	{                                // if character is at odd position, 7 is subtracted from its ascii.
		onechar = (pw.substr(i, 1))[0];
		ascii = (int)onechar;
		if (i % 2 == 0)
		{
			newascii = ascii + 44; //44 added to ascii here
		}
		else
		{
			newascii = ascii - 7; // 7 subtracted here
		}
		hidden = static_cast<char>(newascii);
		encrypted = encrypted + hidden;

	}
	return encrypted; //encrypted string is returned
}

bool first_name_check(string firstn) //function definition to check that first name contains alphabets only. Function takes in first name as parameter and returns boolean
{
	bool marker;
	int onechar, ascii;
	int f_length = firstn.length();
	for (int i = 0; i <= f_length - 1; i++)
	{
		onechar = (firstn.substr(i, 1))[0];
		ascii = (int)onechar;
		if ((ascii >= 65 && ascii <= 90) || (ascii >= 97 && ascii <= 122)) //check condition
		{
			marker = 1;
		}
		else
		{
			marker = 0;
			break;
		}

	}
	return marker;
}

bool sur_name_check(string surn) //function definition to check that surname contains alphabets only. Function takes in surname as parameter and returns boolean
{
	bool marker;
	int onechar, ascii;
	int s_length = surn.length();
	for (int i = 0; i <= s_length - 1; i++)
	{
		onechar = (surn.substr(i, 1))[0];
		ascii = (int)onechar;

		if ((ascii >= 65 && ascii <= 90) || (ascii >= 97 && ascii <= 122)) //check condition
		{
			marker = 1;
		}
		else
		{
			marker = 0;
			break;
		}
	}
	return marker;
}

string decrypt(string pw) //decrypt function taking in encrypted string as input
{
	int length, ascii, newascii;
	char hidden, onechar;
	string decrypted = "";

	length = pw.length();
	for (int i = 0; i <= length - 1; i++) // reverse of encryption is done here
	{
		onechar = (pw.substr(i, 1))[0];
		ascii = (int)onechar;
		if (i % 2 == 0)
		{
			newascii = ascii - 44; //for even positioned characters, 44 is subtracted from ascii now
		}
		else
		{
			newascii = ascii + 7; //for odd positioned characters, 7 is added to ascii now.
		}
		hidden = static_cast<char>(newascii);
		decrypted = decrypted + hidden;

	}
	return decrypted; // decrypted (original password) is returned
}

bool phone_check(string number) // function definition for phone number check to see whether is contains numbers only.
{
	int onechar, ascii;
	int p_length = number.length();
	for (int i = 0; i <= p_length - 1; i++)
	{
		onechar = (number.substr(i, 1))[0];
		ascii = (int)onechar;
	}
	if ((ascii >= 48 && ascii <= 57)) //condition for numbers
	{
		return 1;
	}
	else
	{
		return 0;
	}
}

int login_menu() // function definition for student login menu, once s/he logs in. This serves as the main menu too.
{
	char key = 'n';
    int choice = 0;
	int pointedAt = 1;
	do
    {
	switch(pointedAt)
	{
    case 1:
        system("cls");
        cout << endl; //All the options below are printed to screen
        cout << " > View My Details " << endl;          //choice 1
        cout << "   What's New? " << endl;              //choice 2
        cout << "   New Report " << endl;               //choice 3
        cout << "   View Latest Report " << endl;       //choice 4
        cout << "   View All Reports " << endl;         //choice 5
        cout << "   View Resolutions! " << endl;        //choice 6
        cout << "   Log Out " << endl;                  //choice 7
        break;
    case 2:
        system("cls");
        cout << endl; //All the options below are printed to screen
        cout << "   View My Details " << endl;          //choice 1
        cout << " > What's New? " << endl;              //choice 2
        cout << "   New Report " << endl;               //choice 3
        cout << "   View Latest Report " << endl;       //choice 4
        cout << "   View All Reports " << endl;         //choice 5
        cout << "   View Resolutions! " << endl;        //choice 6
        cout << "   Log Out " << endl;                  //choice 7
        break;
    case 3:
        system("cls");
        cout << endl; //All the options below are printed to screen
        cout << "   View My Details " << endl;          //choice 1
        cout << "   What's New? " << endl;              //choice 2
        cout << " > New Report " << endl;               //choice 3
        cout << "   View Latest Report " << endl;       //choice 4
        cout << "   View All Reports " << endl;         //choice 5
        cout << "   View Resolutions! " << endl;        //choice 6
        cout << "   Log Out " << endl;                  //choice 7
        break;
    case 4:
        system("cls");
        cout << endl; //All the options below are printed to screen
        cout << "   View My Details " << endl;          //choice 1
        cout << "   What's New? " << endl;              //choice 2
        cout << "   New Report " << endl;               //choice 3
        cout << " > View Latest Report " << endl;       //choice 4
        cout << "   View All Reports " << endl;         //choice 5
        cout << "   View Resolutions! " << endl;        //choice 6
        cout << "   Log Out " << endl;                  //choice 7
        break;
    case 5:
        system("cls");
        cout << endl; //All the options below are printed to screen
        cout << "   View My Details " << endl;          //choice 1
        cout << "   What's New? " << endl;              //choice 2
        cout << "   New Report " << endl;               //choice 3
        cout << "   View Latest Report " << endl;       //choice 4
        cout << " > View All Reports " << endl;         //choice 5
        cout << "   View Resolutions! " << endl;        //choice 6
        cout << "   Log Out " << endl;                  //choice 7
        break;
    case 6:
        system("cls");
        cout << endl; //All the options below are printed to screen
        cout << "   View My Details " << endl;          //choice 1
        cout << "   What's New? " << endl;              //choice 2
        cout << "   New Report " << endl;               //choice 3
        cout << "   View Latest Report " << endl;       //choice 4
        cout << "   View All Reports " << endl;         //choice 5
        cout << " > View Resolutions! " << endl;        //choice 6
        cout << "   Log Out " << endl;                  //choice 7
        break;
    case 7:
        system("cls");
        cout << endl; //All the options below are printed to screen
        cout << "   View My Details " << endl;          //choice 1
        cout << "   What's New? " << endl;              //choice 2
        cout << "   New Report " << endl;               //choice 3
        cout << "   View Latest Report " << endl;       //choice 4
        cout << "   View All Reports " << endl;         //choice 5
        cout << "   View Resolutions! " << endl;        //choice 6
        cout << " > Log Out " << endl;                  //choice 7
        break;
	}

	do
    {
        key = DetectKey();
	}
	while( key=='n' || key=='l' || key=='r');

	switch (key)
		{
		case 'd':
		    if (pointedAt == 6) pointedAt = 7;
			if (pointedAt == 5) pointedAt = 6;
			if (pointedAt == 4) pointedAt = 5;
			if (pointedAt == 3) pointedAt = 4;
			if (pointedAt == 2) pointedAt = 3;
			if (pointedAt == 1) pointedAt = 2;
			break;

		case 'u':
			if (pointedAt == 2) pointedAt = 1;
			if (pointedAt == 3) pointedAt = 2;
			if (pointedAt == 4) pointedAt = 3;
			if (pointedAt == 5) pointedAt = 4;
			if (pointedAt == 6) pointedAt = 5;
			if (pointedAt == 7) pointedAt = 6;
			break;
		case 'e':
			if (pointedAt == 1) choice = 1;
			if (pointedAt == 2) choice = 2;
			if (pointedAt == 3) choice = 3;
			if (pointedAt == 4) choice = 4;
			if (pointedAt == 5) choice = 5;
			if (pointedAt == 6) choice = 6;
			if (pointedAt == 7) choice = 7;
			break;
		default:
			break;

		}
    } while(choice == 0);
	return choice;
}

int admin_menu() //function definition for admin menu that serves as admin account main menu.
{
    char key = 'n';
    int choice = 0;
	int pointedAt = 1;
	do
    {
        switch(pointedAt)
        {
        case 1:
            system("cls");
            cout << "     Hello Admin!"<< endl;
            cout << endl;
            cout << " > View My Details " << endl;
            cout << "   Latest Issues " << endl;
            cout << "   View All Reports " << endl;
            cout << "   Search Resolutions " << endl;
            cout << "   Log Out " << endl;
            break;
        case 2:
            system("cls");
            cout << "     Hello Admin!"<< endl;
            cout << endl;
            cout << "   View My Details " << endl;
            cout << " > Latest Issues " << endl;
            cout << "   View All Reports " << endl;
            cout << "   Search Resolutions " << endl;
            cout << "   Log Out " << endl;
            break;
        case 3:
            system("cls");
            cout << "     Hello Admin!"<< endl;
            cout << endl;
            cout << "   View My Details " << endl;
            cout << "   Latest Issues " << endl;
            cout << " > View All Reports " << endl;
            cout << "   Search Resolutions " << endl;
            cout << "   Log Out " << endl;
            break;
        case 4:
            system("cls");
            cout << "     Hello Admin!"<< endl;
            cout << endl;
            cout << "   View My Details " << endl;
            cout << "   Latest Issues " << endl;
            cout << "   View All Reports " << endl;
            cout << " > Search Resolutions " << endl;
            cout << "   Log Out " << endl;
            break;
        case 5:
            system("cls");
            cout << "     Hello Admin!"<< endl;
            cout << endl;
            cout << "   View My Details " << endl;
            cout << "   Latest Issues " << endl;
            cout << "   View All Reports " << endl;
            cout << "   Search Resolutions " << endl;
            cout << " > Log Out " << endl;
            break;
        }
        do
    {
        key = DetectKey();
	}
	while( key=='n' || key=='l' || key=='r');

	switch (key)
		{
		case 'd':
		    if (pointedAt == 4) pointedAt = 5;
			if (pointedAt == 3) pointedAt = 4;
			if (pointedAt == 2) pointedAt = 3;
			if (pointedAt == 1) pointedAt = 2;
			break;

		case 'u':
			if (pointedAt == 2) pointedAt = 1;
			if (pointedAt == 3) pointedAt = 2;
			if (pointedAt == 4) pointedAt = 3;
			if (pointedAt == 5) pointedAt = 4;
			break;
		case 'e':
			if (pointedAt == 1) choice = 1;
			if (pointedAt == 2) choice = 2;
			if (pointedAt == 3) choice = 3;
			if (pointedAt == 4) choice = 4;
			if (pointedAt == 5) choice = 5;
			break;
		default:
			break;

		}
    }
    while (choice == 0);
	return choice;
}

void user_details(string fname, string sname, int camp_id, string phonenum, string emailadd, string user_name, string pass) //function definition for user details
{
	cout << endl; //in thus function, use details are printed to screen in the following format. This information comes from arrays assigned for user and in array index where authentication took place.
	cout << "Full Name: " << fname << " " << sname << endl;
	cout << "Campus ID: " << camp_id << endl;
	cout << "Phone Number: " << phonenum << endl;
	cout << "Email Address: " << emailadd << endl;
	cout << "User Name: " << user_name << endl;
	cout << "Password: " << pass << endl;

}

void admin_details(string fname, string sname, string user_name, string pass) //function definition for admin details
{
	cout << endl;
	cout << "Full Name: " << fname << " " << sname << endl;
	cout << "User Name: " << user_name << endl;
	cout << "Password: " << pass << endl;
}
void whats_new() //function definition for article. This function prints an article to screen.
{
    cout << endl;
	cout << setw(60) << "Heres how Lifetime Learning @LUMS is Transforming Lives " << endl;
	cout << endl;
	cout << "\"I would rather die of passion than of boredom \"- Vincent Van Gogh. " << endl;
	cout << "These are some lucid words uttered by the famous Dutch painter, one of the most influential figures in the history of western art." << endl;
	cout << "Dont you wish the same? If you are still looking for the answer, then keep reading." << endl;
	cout << endl;
	cout << "Wouldnt you like to do something that was once your passion, but unfortunately you got buried by the minutiae of your boring professional life? " << endl;
	cout << "Wouldnt you like to have some inspirational stories to tell your grandchildren about how adventurous, creative and learned you were and how you fulfilled your dreams alongside your profession?" << endl;
	cout << "Or imagine the possibility that one day youre headlining a TED Talk, sharing your story about how seeking your passion showed you the way to enter into a profession that you loved and how you ended up living a life full of dedication and craze." << endl;
	cout << "Isnt it great that we are living in a world full of crazy opportunities and learning experiences that do not really make us feel burdened, but in fact, become a source of happiness and leisure?" << endl;
	cout << "Unfortunately, even though we have plenty of capable people with hidden talents, there are few proper channels to unleash these talents and immense energies." << endl;
	cout << "There are a very few institutes that give you a chance to take part in the learning programmes related to your hobbies and interests." << endl;
	cout << "Luckily, the Lahore University of Management Sciences (LUMS) is one of the few that does offer such opportunities." << endl;
	cout << "Started two years ago, Lifetime Learning @LUMS (LLL) has successfully attracted over 2,500 participants from all age groups and a vast variety of backgrounds with its 50+ diversified short courses." << endl;
	cout << endl;
}
void welcome(string fname, string surname) //function definition for welcome display
{                                          // used in both admin and user accounts
	cout << endl;
	cout << "ACCESS GRANTED " << endl;
	cout << "Welcome " << fname << " " << surname << endl;
	cout << endl;
}

int Send_to_Menu() //function definition for Send to a Particular Menu function
{
    char key = 'n';
    int choice = -1;
	int pointedAt = 1;
	do
    {
        switch(pointedAt)
        {
        case 1:
            //system("cls");
            setCursorPosition(1,25);
            cout << endl;
            cout << "  > Go to main menu " << endl; //both options are displayed
            cout << "    Log Out " << endl;
            break;
        case 2:
            //system("cls");
            setCursorPosition(1,25);
            cout << endl;
            cout << "    Go to main menu " << endl; //both options are displayed
            cout << "  > Log Out " << endl;
            break;
        }
        do
    {
        key = DetectKey();
	}
	while( key=='n' || key=='l' || key=='r');

	switch (key)
		{
		case 'd':
			if (pointedAt == 1) pointedAt = 2;
			break;

		case 'u':
			if (pointedAt == 2) pointedAt = 1;
			break;
		case 'e':
			if (pointedAt == 1) choice = 0;
			if (pointedAt == 2) choice = 99;
			break;
		default:
			break;

    }}
    while (choice == -1);
	return choice;
}

int Old_Send_to_Menu() //function definition for Send to a Particular Menu function
{
    int option;
	cout << "Press 0 to go to main menu " << endl; //both options are displayed
	cout << "Press 99 to Log Out " << endl;
	while (!(cin >> option) || (option != 0 && option != 99)) //user choice is validated
	{
		cout << "Please enter a valid option " << endl;
		cin.clear(); //cin failure is dealt with
		string dummy;
		getline(cin, dummy);
		cout << "Enter option ";
	}
	return option; // user choice is returned.
}

char DetectKey()
{
	int c = 0;
	char r = 'n'; // r : return value

	switch ((c = _getch()))
	{
	case KEY_UP:
		r = 'u';     //key up
		break;
	case KEY_DOWN:
		r = 'd';        // key down
		break;
	case KEY_LEFT:
		r = 'l';  // key left
		break;
	case KEY_RIGHT:
		r = 'r';  // key right
		break;
	case ENTER:
		r = 'e';
		break;
	default:
		r = 'n';
		// none of these
		break;
	}
	return r;
}

void SetTextColor(int value) {

	// source : http://www.cplusplus.com/forum/beginner/77879/

	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), value);

	/*
	0: Black
	1: Blue
	2: Green
	3: Cyan
	4: Red
	5: Purple
	6: Yellow (Dark)
	7: Default white
	8: Gray/Grey
	9: Bright blue
	10: Brigth green
	11: Bright cyan
	12: Bright red
	13: Pink/Magenta
	14: Yellow
	15: Bright white
	-Numbers after 15 are background colors-
	*/

}

void SetConsoleColors(int ForgC, int BackC)      //text, console background
{
	//source : https://stackoverflow.com/questions/29574849/how-to-change-text-color-and-console-color-in-codeblocks

	WORD wColor = ((BackC & 0x0F) << 4) + (ForgC & 0x0F);
	//Get the handle to the current output buffer...
	HANDLE hStdOut = GetStdHandle(STD_OUTPUT_HANDLE);
	//This is used to reset the carat/cursor to the top left.
	COORD coord = { 0, 0 };
	//A return value... indicating how many chars were written
	  //   not used but we need to capture this since it will be
		//   written anyway (passing NULL causes an access violation).
	DWORD count;

	//This is a structure containing all of the console info
// it is used here to find the size of the console.
	CONSOLE_SCREEN_BUFFER_INFO csbi;
	//Here we will set the current color
	SetConsoleTextAttribute(hStdOut, wColor);
	if (GetConsoleScreenBufferInfo(hStdOut, &csbi))
	{
		//This fills the buffer with a given character (in this case 32=space).
		FillConsoleOutputCharacter(hStdOut, (TCHAR)32, csbi.dwSize.X * csbi.dwSize.Y, coord, &count);

		FillConsoleOutputAttribute(hStdOut, csbi.wAttributes, csbi.dwSize.X * csbi.dwSize.Y, coord, &count);
		//This will set our cursor position for the next print statement.
		SetConsoleCursorPosition(hStdOut, coord);
	}
	return;
}

void setCursorPosition(int x, int y)
{
	//source: https://stackoverflow.com/questions/34842526/update-console-without-flickering-c

	// x is the column, y is the row. The origin (0,0) is top-left.

	static const HANDLE hOut = GetStdHandle(STD_OUTPUT_HANDLE);
	std::cout.flush();
	COORD coord = { (SHORT)x, (SHORT)y };
	SetConsoleCursorPosition(hOut, coord);
}

void About()
{
    system("cls");
	cout << "\n\n\n\n\n\n\n\t\t\t\t Made by: \n";
	cout << "\t\t\t\t\t Huzaifah Nadeem     : 2022-10-0079 \n";
	cout << "\t\t\t\t\t Hassaan Ahmad Waqar : 2022-10-0137 \n\n";
	cout << "\t\t\t\t For CS100 Project.\n\n";
	cout << "\t\t\t\t Dated: \n";
	cout << "\t\t\t\t\t November-December 2018.\n\n";
	cout << "\t\t\t\t\t ";
	system("PAUSE");
}

string passwordEnterandHide()
{   // adapted from : http://www.cplusplus.com/forum/general/3570/
    string pass ="";
    char ch;
    ch = _getch();
    while(ch != 13)     //character 13 is enter
    {
      pass.push_back(ch);
      cout << '*';
      ch = _getch();
    }
    return pass;
}
